---
title: "Data_Harvesting_Lyrics_ES_DE_TR"
format:
  html:
    self-contained: true
    embed-resources: true 
    toc: true
    toc-location: left
    toc-floating: true
    toc-depth: 3  
    number-sections: true  
editor: visual
---

## Introduction / Purpose of Study

The purpose of this project is to showcase data harvesting skills and perform a text mining assignment to reveal violent language use in rap-hiphop songs across German, Turkish and Spanish on the basis of gender.

As the reader is soon to witness, this project will gradually drift apart from the gender violence focus and employ a general sentiment analysis approach. But worry not! This is only because all three languages have done very well and used violent language in the gender context extremely rarely. That is why we asked the following question: Then what do they sing about?

At the early stages of the project, we will be focusing on extracting information regarding the most popular artists and their three most popular songs across Germany, Turkey, and Spain. Having employed Spotify API for that purpose, we will then proceed to extracting lyrics from Genius.com using the Genius API. In doing so, we will not benefit from any packages that are specific to these tasks and use our own functions and scraping methods.

To not spoil all the fun, we will move onto the scraping section.

## Libraries

```{r, message=FALSE}
library(rvest)     
library(stringdist) 
library(httr)      
library(jsonlite)  
library(dplyr)     
library(purrr)     
library(tibble)    
library(tidyr)     
library(stringr)   
library(stopwords) 
library(widyr)     
library(ggplot2)   
library(tidytext)  
library(quanteda) 
library(wordcloud2)


```

```{r}
#| include: false
#usethis::edit_r_environ()

SPOTIFY_CLIENT_ID <- Sys.getenv("SPOTIFY_CLIENT_ID") 
SPOTIFY_CLIENT_SECRET <- Sys.getenv("SPOTIFY_CLIENT_SECRET")

GENIUS_CLIENT_ID <- Sys.getenv("GENIUS_CLIENT_ID")
GENIUS_CLIENT_SECRET <-Sys.getenv("GENIUS_CLIENT_SECRET")

```

## Top 5 German Hip/ Hop Rap Artists & Their Top Songs on Spotify

Authentication: Get Spotify API Token

```{r}
get_spotify_token <- function(client_id, client_secret) {
  auth_url <- "https://accounts.spotify.com/api/token"  
  
  response <- POST(
    auth_url,  
    body = list(
      grant_type = "client_credentials",  
      client_id = SPOTIFY_CLIENT_ID,  
      client_secret = SPOTIFY_CLIENT_SECRET  
    ),
    encode = "form"  
  )
  
  
  if (http_status(response)$category != "Success") {  
    stop("Failed to authenticate. Check your client ID and secret.")  
  }
  
  
  token_data <- content(response, as = "parsed", type = "application/json")  
  
  
  if (!"access_token" %in% names(token_data)) {  
    stop("Error: Could not retrieve access token.")  
  }
  
  return(token_data$access_token)  
}

access_token <- get_spotify_token(SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)  

```

Search for Hip-Hop/Rap Artists from Germany

```{r}
search_artists <- function(query, access_token, limit = 50) {
  Sys.sleep(0.5)  
  
  response <- GET(
    "https://api.spotify.com/v1/search",
    query = list(q = query, type = "artist", limit = limit),
    add_headers(Authorization = paste("Bearer", access_token))
  )
  
  
  if (http_status(response)$category != "Success") {
    message("API request failed for query: ", query)
    return(NULL)  
  }
  
  data <- content(response, as = "parsed", type = "application/json")
  
  
  if (!"artists" %in% names(data) || length(data$artists$items) == 0) {
    message("No artists found for query: ", query)
    return(NULL)
  }
  
  
  tibble(
    id = map_chr(data$artists$items, "id", .default = NA),  
    name = map_chr(data$artists$items, "name", .default = NA),  
    popularity = map_dbl(data$artists$items, "popularity", .default = 0)  
  )
}

search_terms_german <- c("Deutschrap", "Rap Germany", "Deutscher Rapper", "Trap Germany", "Drill Germany",
                         "Hip Hop Germany")


all_artists_german <- map_df(search_terms_german, search_artists, access_token = access_token) %>%
  distinct(id, .keep_all = TRUE) %>%  
  arrange(desc(popularity))  

top_artists_german <- head(all_artists_german, 7)

```

Fetch Detailed Artist Metadata

```{r}

get_artist_details_german <- function(artist_ids, access_token) {
  Sys.sleep(0.5)  
  
  response <- GET(
    "https://api.spotify.com/v1/artists",
    query = list(ids = paste(artist_ids, collapse = ",")),  
    add_headers(Authorization = paste("Bearer", access_token))
  )
  
  
  data <- content(response, as = "parsed")$artists
  
  
  tibble(
    id = map_chr(data, "id"),  
    followers = map_dbl(data, ~ .x$followers$total %||% 0)  
  )
}

artist_details_german <- get_artist_details_german(top_artists_german$id, access_token)

top_artists_german <- left_join(top_artists_german, artist_details_german, by = "id")

```

Retrieve Top Songs for Each Artist

```{r}
get_top_tracks <- function(artist_id, access_token) {
  Sys.sleep(0.5)  
  
  response <- GET(
    paste0("https://api.spotify.com/v1/artists/", artist_id, "/top-tracks"),
    query = list(market = "DE"),  
    add_headers(Authorization = paste("Bearer", access_token))
  )
  
  tracks_data <- content(response, as = "parsed")$tracks
  
  if (length(tracks_data) == 0) {
    return(tibble(track_name = NA_character_, track_popularity = NA_real_))
  }
  
  tibble(
    track_name = map_chr(tracks_data[1:5], "name", .default = NA),  
    track_popularity = map_dbl(tracks_data[1:5], "popularity", .default = NA)   
  )
}

top_artists_german <- top_artists_german %>%
  mutate(top_tracks = map(id, ~ get_top_tracks(.x, access_token)))

```

Clean and Format the Final Results

```{r}

top_artists_german_tracks <- top_artists_german %>%
  select(artist_name = name, artist_popularity = popularity, 
         followers, top_tracks) %>%
  unnest(cols = top_tracks)


top_artists_german_tracks <- top_artists_german_tracks %>%
  filter(!artist_name %in% c("Morad", "Rvfv"))


print(top_artists_german_tracks)


```

## Top 5 Turkish Hip/ Hop Rap Artists & Their Top Songs on Spotify

Authentication: Get Spotify API Token

```{r}


get_spotify_token <- function(client_id, client_secret) {
  auth_url <- "https://accounts.spotify.com/api/token"  
  
  response <- POST(
    auth_url,
    body = list(
      grant_type = "client_credentials",  
      client_id = SPOTIFY_CLIENT_ID, 
      client_secret = SPOTIFY_CLIENT_SECRET
    ),
    encode = "form"
  )
  
  if (http_status(response)$category != "Success") {
    stop("Failed to authenticate. Check your client ID and secret.")
  }
  
  token_data <- content(response, as = "parsed", type = "application/json")
  
  if (!"access_token" %in% names(token_data)) {
    stop("Error: Could not retrieve access token.")
  }
  
  return(token_data$access_token)  
}

access_token <- get_spotify_token(SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)  

```

Search for Hip-Hop/Rap Artists from Turkey

Authentication: Get Spotify API Token

```{r}
get_spotify_token <- function(client_id, client_secret) {
  auth_url <- "https://accounts.spotify.com/api/token"  
  
  response <- POST(
    auth_url,  
    body = list(
      grant_type = "client_credentials",  
      client_id = SPOTIFY_CLIENT_ID,  
      client_secret = SPOTIFY_CLIENT_SECRET  
    ),
    encode = "form" 
  )

  if (http_status(response)$category != "Success") {  
    stop("Failed to authenticate. Check your client ID and secret.")  
  }

  token_data <- content(response, as = "parsed", type = "application/json")  
  
  if (!"access_token" %in% names(token_data)) {  
    stop("Error: Could not retrieve access token.")  
  }

  return(token_data$access_token)  
}
access_token <- get_spotify_token(client_id, client_secret) 
```

Search for Hip-Hop/Rap Artists from Turkey

```{r}
search_artists <- function(query, access_token, limit = 50) {
  Sys.sleep(0.5)  

  response <- GET(
    "https://api.spotify.com/v1/search",  
    query = list(q = query, type = "artist", limit = limit),  
    add_headers(Authorization = paste("Bearer", access_token))  
  )

  if (http_status(response)$category != "Success") {  
    message("API request failed for query: ", query)  
    return(NULL)  
  }

  data <- content(response, as = "parsed", type = "application/json")  

  if (!"artists" %in% names(data) || length(data$artists$items) == 0) {  
    message("No artists found for query: ", query)  
    return(NULL)  
  }

  
  tibble(
    id = map_chr(data$artists$items, "id", .default = NA),  
    name = map_chr(data$artists$items, "name", .default = NA),  
    popularity = map_dbl(data$artists$items, "popularity", .default = 0)  
  )
}

search_terms <- c("hip hop Türkiye", "rap Türkiye", "trap Türkiye", "drill Türkiye",  
                  "alternatif rap Türkiye", "gangsta rap Türkiye", "hip hop underground Türkiye", "old school hip hop Türkiye")

all_artists <- map_df(search_terms, search_artists, access_token = access_token) %>%  
  distinct(id, .keep_all = TRUE) %>%  
  arrange(desc(popularity))  
top_artists <- head(all_artists, 5)  

```

Fetch Detailed Artist Metadata

```{r}
get_artist_details <- function(artist_ids, access_token) {
  Sys.sleep(0.5)  

  response <- GET(
    "https://api.spotify.com/v1/artists",  
    query = list(ids = paste(artist_ids, collapse = ",")),  
    add_headers(Authorization = paste("Bearer", access_token))  
  )

  
  data <- content(response, as = "parsed")$artists  

  tibble(
    id = map_chr(data, "id"),  
    followers = map_dbl(data, ~ .x$followers$total %||% 0)  
  )
}


artist_details <- get_artist_details(top_artists$id, access_token)  

top_artists <- left_join(top_artists, artist_details, by = "id")  


```

Retrieve Top 3 Songs for Each Artist

```{r}
get_top_tracks <- function(artist_id, access_token) {
  Sys.sleep(0.5)  

  response <- GET(
    paste0("https://api.spotify.com/v1/artists/", artist_id, "/top-tracks"),  
    query = list(market = "TR"),  
    add_headers(Authorization = paste("Bearer", access_token))  
  )

  tracks_data <- content(response, as = "parsed")$tracks  

  if (length(tracks_data) == 0) {
    return(tibble(track_name = NA_character_, track_popularity = NA_real_))   
  }

  tibble(
    track_name = map_chr(tracks_data[1:3], "name", .default = NA),  
    track_popularity = map_dbl(tracks_data[1:3], "popularity", .default = NA)  
  )
}

top_artists <- top_artists %>%
  mutate(top_tracks = map(id, ~ get_top_tracks(.x, access_token)))  

```

Clean and Format the Final Results

```{r}

top_artists_tracks <- top_artists %>%
  select(artist_name = name, artist_popularity = popularity,  
         followers, top_tracks) %>%  
  unnest(cols = top_tracks)  

print(top_artists_tracks)  
```

## Top 5 Spanish Artists Hip/ Hop Rap Artists & Their Top Songs on Spotify

Authentication: Get Spotify API Token

```{r}

get_spotify_token <- function(client_id, client_secret) {
  auth_url <- "https://accounts.spotify.com/api/token"  
  
  response <- POST(
    auth_url,
    body = list(
      grant_type = "client_credentials",  
      client_id = SPOTIFY_CLIENT_ID, 
      client_secret = SPOTIFY_CLIENT_SECRET
    ),
    encode = "form"
  )
  
  if (http_status(response)$category != "Success") {
    stop("Failed to authenticate. Check your client ID and secret.")
  }
  
  token_data <- content(response, as = "parsed", type = "application/json")
  
  if (!"access_token" %in% names(token_data)) {
    stop("Error: Could not retrieve access token.")
  }
  
  return(token_data$access_token)  
}

access_token <- get_spotify_token(SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)  

```

Search for Hip-Hop/Rap Artists from Spain

```{r}
search_artists_es <- function(query, access_token, limit = 50) {
  Sys.sleep(0.5)  
  
  response <- GET(
    "https://api.spotify.com/v1/search",
    query = list(q = query, type = "artist", limit = limit),
    add_headers(Authorization = paste("Bearer", access_token))
  )
  
  if (http_status(response)$category != "Success") {
    message("API request failed for query: ", query)
    return(NULL)  
  }
  
  data <- content(response, as = "parsed", type = "application/json")
  
  if (!"artists" %in% names(data) || length(data$artists$items) == 0) {
    message("No artists found for query: ", query)
    return(NULL)
  }
  
  tibble(
    id = map_chr(data$artists$items, "id", .default = NA),  
    name = map_chr(data$artists$items, "name", .default = NA),  
    popularity = map_dbl(data$artists$items, "popularity", .default = 0)  
  )
}

search_terms_es <- c("hip hop España", "rap España", "trap España", "drill España",
                     "rap alternativo España", "rap consciente España", 
                     "gangsta rap España", "hip hop underground España", 
                     "latin trap España", "reggaeton España", 
                     "música urbana España", "old school hip hop España",
                     "spanglish hip hop España")

all_artists_es <- map_df(search_terms_es, search_artists_es, access_token = access_token) %>%
  distinct(id, .keep_all = TRUE) %>%  
  arrange(desc(popularity))  

top_artists_es <- head(all_artists_es, 5)

```

Fetch Detailed Artist Metadata

```{r}

get_artist_details_es <- function(artist_ids, access_token) {
  Sys.sleep(0.5)  
  
  response <- GET(
    "https://api.spotify.com/v1/artists",
    query = list(ids = paste(artist_ids, collapse = ",")),  
    add_headers(Authorization = paste("Bearer", access_token))
  )
  
  data_es <- content(response, as = "parsed")$artists
  
  tibble(
    id = map_chr(data_es, "id"),  
    followers = map_dbl(data_es, ~ .x$followers$total %||% 0)  
  )
}

artist_details_es <- get_artist_details_es(top_artists_es$id, access_token)

top_artists_es <- left_join(top_artists_es, artist_details_es, by = "id")  

```

Retrieve Top 3 Songs for Each Artist

```{r}
get_top_tracks_es <- function(artist_id, access_token, existing_songs = NULL) {
  Sys.sleep(0.5)
  
  response_es <- GET(
    paste0("https://api.spotify.com/v1/artists/", artist_id, "/top-tracks"),
    query = list(market = "ES"),
    add_headers(Authorization = paste("Bearer", access_token))
  )
  
  if (status_code(response_es) != 200) {
    message(paste("API request failed for artist ID:", artist_id, "Status:", status_code(response_es)))
    return(tibble(track_name_es = NA_character_, track_popularity_es = NA_real_))
  }
  
  parsed_response <- content(response_es, as = "parsed", type = "application/json")
  
  if (!"tracks" %in% names(parsed_response) || length(parsed_response$tracks) == 0) {
    message(paste("No tracks found for artist ID:", artist_id))
    return(tibble(track_name_es = NA_character_, track_popularity_es = NA_real_))
  }
  
  tracks_data_es <- parsed_response$tracks
  
  tracks_df_es <- tibble(
    track_name_es = map_chr(tracks_data_es, "name", .default = NA),
    track_popularity_es = map_dbl(tracks_data_es, "popularity", .default = NA)
  ) %>%
    arrange(desc(track_popularity_es))  
  
  if (!is.null(existing_songs)) {
    tracks_df_es <- tracks_df_es %>% filter(!(track_name_es %in% existing_songs))
  }
  
  return(head(tracks_df_es, min(nrow(tracks_df_es), 3)))
}

selected_songs_es <- c()

top_artists_es <- top_artists_es %>%
  mutate(top_tracks_es = map(id, ~ {
    tracks <- get_top_tracks_es(.x, access_token, existing_songs = selected_songs_es)
    selected_songs_es <<- c(selected_songs_es, tracks$track_name_es) 
    return(tracks)
  }))

```

Clean and Format the Final Results

```{r}
top_artists_tracks_es <- top_artists_es %>%
  select(artist_name = name, artist_popularity = popularity, 
         followers, top_tracks_es) %>%  
  unnest(cols = top_tracks_es)

print(top_artists_tracks_es)

```

## Extracting Genius IDs for songs and their URLs

Authentication: Get Spotify API Token

```{r}

get_genius_token <- function(client_id, client_secret) {
  response <- POST(
    "https://api.genius.com/oauth/token",
    body = list(
      grant_type = "client_credentials",
      client_id = GENIUS_CLIENT_ID,
      client_secret = GENIUS_CLIENT_SECRET
    ),
    encode = "form"
  )
  if (status_code(response) != 200) {
    stop("Oops! Can’t get a new card. Check your ID and secret.")
  }
  data <- content(response, as = "parsed", type = "application/json")
  return(data$access_token)
}

genius_access_token <- get_genius_token(GENIUS_CLIENT_ID, GENIUS_CLIENT_SECRET)

genius_base_url <- "https://api.genius.com"

genious_get_song_data <- function(artist, track, access_token) {
  Sys.sleep(1)  
  
  query <- paste(artist, track, "German", sep = " ")
  search_url <- paste0(genius_base_url, "/search")
  
  response <- GET(
    search_url,
    query = list(q = query, access_token = access_token),
    add_headers("User-Agent" = "Mozilla/5.0")
  )
  
  if (status_code(response) != 200) {
    message(paste("Search failed for:", artist, "-", track, "Status:", status_code(response)))
    return(list(url = NA, id = NA))
  }
  
  data <- content(response, as = "parsed", type = "application/json")
  hits <- data$response$hits
  
  if (length(hits) == 0) {
    message(paste("No Genius match found for:", artist, "-", track))
    return(list(url = NA, id = NA))
  }
  
  similarity <- function(a, b) stringdist(tolower(a), tolower(b), method = "lv")
  
  best_match <- NULL
  best_score <- Inf
  
  for (hit in hits) {
    song <- hit$result
    song_artist <- song$primary_artist$name
    song_title <- song$title
    song_url <- song$url
    song_id <- song$id
    
    if (!grepl("-lyrics$", song_url)) next
    
    artist_similarity <- similarity(artist, song_artist)
    track_similarity <- similarity(track, song_title)
    total_score <- artist_similarity + track_similarity
    
    if (total_score < best_score) {
      best_score <- total_score
      best_match <- list(url = song_url, id = song_id)
    }
    
    if (artist_similarity == 0 && track_similarity == 0) {
      message(paste("Found exact match Genius URL:", song_url))
      return(list(url = song_url, id = song_id))
    }
  }
  
  if (!is.null(best_match)) {
    message(paste("Found best match Genius URL:", best_match$url))
    return(best_match)
  }
  
  message(paste("No suitable match found for:", artist, "-", track))
  return(list(url = NA, id = NA))
}

top_artists_german_tracks <- top_artists_german_tracks %>%
  mutate(
    genius_data = map2(artist_name, track_name, ~ genious_get_song_data(.x, .y, genius_access_token)),
    genius_url = map_chr(genius_data, "url"),
    genius_id = map_int(genius_data, "id")
  ) %>%
  drop_na()

print(top_artists_german_tracks %>% select(artist_name, track_name, genius_url, genius_id))



```

### Scrape Genius for German Lyrics

Function to Scrape Lyrics from Genius

```{r}
get_genius_lyrics <- function(song_url) {
  if (is.na(song_url)) return(NA)  
  
  Sys.sleep(1)  
  
  tryCatch({
    page <- read_html(song_url)
    
    lyrics <- page %>%
      html_nodes("div.lyrics") %>%  
      html_text(trim = TRUE)
    
    if (length(lyrics) == 0) {
      lyrics <- page %>%
        html_nodes("div[class^='Lyrics__Container']") %>%
        html_text(trim = TRUE) %>%
        paste(collapse = " ")
    }
    
    if (length(lyrics) == 0) {
      message(paste("Lyrics not found for:", song_url))
      return(NA)
    }
    
    return(lyrics)
  }, error = function(e) {
    message(paste("Error scraping lyrics for:", song_url))
    return(NA)
  })
}


top_artists_german_tracks <- top_artists_german_tracks %>%
  mutate(lyrics  = map_chr(genius_url , get_genius_lyrics ))

```

View and Save Final Dataset

```{r}
print(top_artists_german_tracks  %>% select(artist_name, track_name , genius_url , genius_id , lyrics ))

top_artists_german_tracks_atomic <- top_artists_german_tracks  %>%
  select(artist_name, track_name , genius_url , genius_id , lyrics ) %>%
  mutate(across(everything(), as.character))  
write.csv(top_artists_german_tracks_atomic, "german_artists_lyrics.csv", row.names = FALSE)


```

### Scrape Genius for Turkish Lyrics

Function to Scrape Lyrics from Genius

```{r}
get_genius_token <- function(client_id, client_secret) {
  response <- POST(
    "https://api.genius.com/oauth/token",
    body = list(
      grant_type = "client_credentials",
      client_id = GENIUS_CLIENT_ID,
      client_secret = GENIUS_CLIENT_SECRET
    ),
    encode = "form"
  )
  if (status_code(response) != 200) {
    stop("Oops! Can’t get a new card. Check your ID and secret.")
  }
  data <- content(response, as = "parsed", type = "application/json")
  return(data$access_token)
}


genius_access_token <- get_genius_token(GENIUS_CLIENT_ID, GENIUS_CLIENT_SECRET)
genius_base_url <- "https://api.genius.com"


get_genius_song_url <- function(artist, track, access_token) {
  Sys.sleep(1)  

  
  query <- paste(artist, track, "Türkiye", sep = " ")
  search_url <- paste0(genius_base_url, "/search")
  
 
  response <- GET(
    search_url,
    query = list(q = query, access_token = access_token),
    add_headers("User-Agent" = "Mozilla/5.0")
  )
  
 
  if (status_code(response) != 200) {
    message(paste("Search failed for:", artist, "-", track, "Status:", status_code(response)))
    return(NA)
  }
  
 
  data <- content(response, as = "parsed", type = "application/json")
  hits <- data$response$hits
  

  if (length(hits) == 0) {
    message(paste("No Genius match found for:", artist, "-", track))
    return(NA)
  }
  
 
  similarity <- function(a, b) stringdist(tolower(a), tolower(b), method = "lv")
  
  
  best_match <- NULL
  best_score <- Inf
  
  for (hit in hits) {
    song <- hit$result
    song_artist <- song$primary_artist$name
    song_title <- song$title
    song_url <- song$url
    
   
    if (!grepl("-lyrics$", song_url)) next
    
  
    artist_similarity <- similarity(artist, song_artist)
    track_similarity <- similarity(track, song_title)
    total_score <- artist_similarity + track_similarity
    
    
    if (total_score < best_score) {
      best_score <- total_score
      best_match <- song_url
    }
    
   
    if (artist_similarity == 0 && track_similarity == 0) {
      message(paste("Found exact match Genius URL:", song_url))
      return(song_url)
    }
  }
  

  if (!is.null(best_match)) {
    message(paste("Found best match Genius URL:", best_match))
    return(best_match)
  }
  
  message(paste("No suitable match found for:", artist, "-", track))
  return(NA)
}


top_artists_tracks <- top_artists_tracks %>%
  mutate(
    genius_url = map2_chr(artist_name, track_name, ~ get_genius_song_url(.x, .y, genius_access_token))
  )


print(top_artists_tracks %>% select(artist_name, track_name, genius_url))
```

```{r}
genious_base_url <- "https://api.genius.com"

get_genius_song_url <- function(artist, track, access_token) {
  Sys.sleep(1)  
  
  query <- paste(artist, track, "Türkiye", sep = " ")
  search_url <- paste0(genious_base_url, "/search")
  
  response <- GET(
    search_url,
    query = list(q = query, access_token = access_token),
    add_headers("User-Agent" = "Mozilla/5.0")
  )
  
  if (status_code(response) != 200) {
    message(paste("Search failed for:", artist, "-", track, "Status:", status_code(response)))
    return(list(url = NA, id = NA))
  }
  
  data <- content(response, as = "parsed", type = "application/json")
  hits <- data$response$hits
  
  if (length(hits) == 0) {
    message(paste("No Genius match found for:", artist, "-", track))
    return(list(url = NA, id = NA))
  }
  
  similarity <- function(a, b) stringdist(tolower(a), tolower(b), method = "lv")
  
  best_match <- NULL
  best_score <- Inf
  
  for (hit in hits) {
    song <- hit$result
    song_artist <- song$primary_artist$name
    song_title <- song$title
    song_url <- song$url
    song_id <- song$id
    
    if (!grepl("-lyrics$", song_url)) next

    artist_similarity <- similarity(artist, song_artist)
    track_similarity <- similarity(track, song_title)
    total_score <- artist_similarity + track_similarity
    
    if (total_score < best_score) {
      best_score <- total_score
      best_match <- list(url = song_url, id = song_id)
    }
    
    if (artist_similarity == 0 && track_similarity == 0) {
      message(paste("Found exact match Genius URL:", song_url))
      return(list(url = song_url, id = song_id))
    }
  }

  if (!is.null(best_match)) {
    message(paste("Found best match Genius URL:", best_match$url))
    return(best_match)
  }
  
  message(paste("No suitable match found for:", artist, "-", track))
  return(list(url = NA, id = NA))
}

top_artists_tracks <- top_artists_tracks %>%
  mutate(
    genius_data = map2(artist_name, track_name, ~ get_genius_song_url(.x, .y, genius_access_token)),
    genius_url = map_chr(genius_data, "url"),
    genius_id = map_int(genius_data, "id")
  )


print(top_artists_tracks %>% select(artist_name, track_name, genius_url, genius_id))
```


```{r}
get_genius_lyrics <- function(song_url) {
  if (is.na(song_url)) return(NA)  
  
  Sys.sleep(1)  
  
  tryCatch({
    page <- read_html(song_url)
 
    lyrics <- page %>%
      html_nodes("div.lyrics") %>%  
      html_text(trim = TRUE)

    if (length(lyrics) == 0) {
      lyrics <- page %>%
        html_nodes("div[class^='Lyrics__Container']") %>%
        html_text(trim = TRUE) %>%
        paste(collapse = " ")
    }
    
    if (length(lyrics) == 0) {
      message(paste("Lyrics not found for:", song_url))
      return(NA)
    }
    
    return(lyrics)
  }, error = function(e) {
    message(paste("Error scraping lyrics for:", song_url))
    return(NA)
  })
}

top_artists_tracks <- top_artists_tracks %>%
  mutate(lyrics = map_chr(genius_url, get_genius_lyrics))




print(top_artists_tracks %>% select(artist_name, track_name, genius_url, genius_id, lyrics))


top_artists_tracks_tr_atomic <- top_artists_tracks %>%
  select(artist_name, track_name, genius_url, genius_id, lyrics) %>%
  mutate(across(everything(), as.character))  

```

```{r}

write.csv(top_artists_tracks_tr_atomic, "top_artists_tracks_with_TR.csv", row.names = FALSE)
```

### Scrape Genius for Spanish Lyrics

Set Up Genius API

```{r}

get_genius_token_es <- function(client_id, client_secret) {
  auth_url <- "https://api.genius.com/oauth/token"
  
  response <- POST(
    auth_url,
    body = list(
      grant_type = "client_credentials",
      client_id = GENIUS_CLIENT_ID,
      client_secret = GENIUS_CLIENT_SECRET
    ),
    encode = "form"
  )
  
  if (http_status(response)$category != "Success") {
    stop("Failed to authenticate with Genius API. Check your client ID and secret.")
  }
  
  token_data <- fromJSON(rawToChar(response$content))
  
  if (!"access_token" %in% names(token_data)) {
    stop("Error: Could not retrieve Genius access token.")
  }
  
  return(token_data$access_token)
}

genius_access_token_es <- get_genius_token_es(GENIUS_CLIENT_ID, GENIUS_CLIENT_SECRET)

genius_base_url_es <- "https://api.genius.com"

```

Function to Search for a Song on Genius

```{r}
get_genius_song_data_es <- function(artist, track, access_token) {
  Sys.sleep(1)  
  
  query <- paste(artist, track, sep = " ")
  search_url <- paste0(genius_base_url_es, "/search")
  
  response <- GET(
    search_url,
    query = list(q = query, access_token = access_token),
    add_headers("User-Agent" = "Mozilla/5.0")
  )
  
  if (status_code(response) != 200) {
    message(paste("Search failed for:", artist, "-", track, "Status:", status_code(response)))
    return(list(url = NA, id = NA))
  }
  
  data_es <- content(response, as = "parsed", type = "application/json")
  hits_es <- data_es$response$hits
  
  if (length(hits_es) == 0) {
    message(paste("No Genius match found for:", artist, "-", track))
    return(list(url = NA, id = NA))
  }
  
  similarity <- function(a, b) stringdist(tolower(a), tolower(b), method = "lv")
  
  best_match <- NULL
  best_score <- Inf
  
  for (hit in hits_es) {
    song <- hit$result
    song_artist <- song$primary_artist$name
    song_title <- song$title
    song_url <- song$url
    song_id <- song$id
    
    if (!grepl("-lyrics$", song_url)) next
    
    artist_similarity <- similarity(artist, song_artist)
    track_similarity <- similarity(track, song_title)
    total_score <- artist_similarity + track_similarity
    
    if (total_score < best_score) {
      best_score <- total_score
      best_match <- list(url = song_url, id = song_id)
    }
    
    if (artist_similarity == 0 && track_similarity == 0) {
      message(paste("Found exact match Genius URL:", song_url))
      return(list(url = song_url, id = song_id))
    }
  }
  
  if (!is.null(best_match)) {
    message(paste("Found best match Genius URL:", best_match$url))
    return(best_match)
  }
  
  message(paste("No suitable match found for:", artist, "-", track))
  return(list(url = NA, id = NA))
}

```

Add Genius URLs & IDs to top_artists_tracks_es

```{r}
top_artists_tracks_es <- top_artists_tracks_es %>%
  mutate(
    genius_data_es = map2(artist_name, track_name_es, ~ get_genius_song_data_es(.x, .y, genius_access_token_es)),
    genius_url_es = map_chr(genius_data_es, "url"),
    genius_id_es = map_int(genius_data_es, "id")
  )

```

Function to Scrape Lyrics from Genius

```{r}
get_genius_lyrics_es <- function(song_url) {
  if (is.na(song_url)) return(NA)  
  
  Sys.sleep(1)  
  
  tryCatch({
    page <- read_html(song_url)
    
    lyrics <- page %>%
      html_nodes("div.lyrics") %>%  
      html_text(trim = TRUE)
    
    if (length(lyrics) == 0) {
      lyrics <- page %>%
        html_nodes("div[class^='Lyrics__Container']") %>%
        html_text(trim = TRUE) %>%
        paste(collapse = " ")
    }
    
    if (length(lyrics) == 0) {
      message(paste("Lyrics not found for:", song_url))
      return(NA)
    }
    
    return(lyrics)
  }, error = function(e) {
    message(paste("Error scraping lyrics for:", song_url))
    return(NA)
  })
}

```

Scrape Lyrics for All Songs

```{r}
top_artists_tracks_es <- top_artists_tracks_es %>%
  mutate(lyrics_es = map_chr(genius_url_es, get_genius_lyrics_es))

```

View and Save Final Dataset

```{r}
print(top_artists_tracks_es %>% select(artist_name, track_name_es, genius_url_es, genius_id_es, lyrics_es))

top_artists_tracks_es_atomic <- top_artists_tracks_es %>%
  select(artist_name, track_name_es, genius_url_es, genius_id_es, lyrics_es) %>%
  mutate(across(everything(), as.character))  

write.csv(top_artists_tracks_es_atomic, "spanish_artists_lyrics.csv", row.names = FALSE)


```

## Cleaning Data

```{r}
turkish_lyrics <- read.csv("top_artists_tracks_with_TR.csv")
```

```{r}
german_lyrics <- read.csv("german_artists_lyrics.csv")
```

Cleaning lyrics:

```{r}
clean_lyrics_de <- function(lyrics) {
  if (is.na(lyrics)) return(NA)
  lyrics <- str_replace_all(lyrics, "\\[.*?\\]", "")
  lyrics <- str_replace_all(lyrics, "\\(.*?\\)", "")
  lyrics <- str_replace_all(lyrics, "[^A-Za-z0-9äöüÄÖÜß\\s\\n.,?!;:'\"-]", "")
  lyrics <- str_replace_all(lyrics, "(?<=[a-z0-9])(?=[A-ZÄÖÜ])", "\n")
  lyrics <- str_squish(lyrics)
  
  return(lyrics)
}

```

```{r}
german_lyrics <- german_lyrics %>%
  mutate(cleaned_lyrics = map_chr(lyrics, clean_lyrics_de))

print(german_lyrics %>% select(artist_name, track_name, cleaned_lyrics))

```

Some lyrics are in English or Spanish lyrics from German speaking artist, we need to remove those songs:

```{r, echo=FALSE}

german_lyrics <- german_lyrics %>%
  filter(!track_name %in% c( "Cold as Ice", "Toyota (2016)", "Palmen aus Plastik", "Toto (feat. RAF Camora)","04:30","Babylon"))


```

Cleaning Turkish lyrics:

```{r}
clean_lyrics_tr <- function(lyrics) {
  if (is.na(lyrics)) return(NA)
  
  
  lyrics <- str_replace_all(lyrics, "\\[.*?\\]", "") 
  
  lyrics <- str_replace_all(lyrics, "\\(.*?\\)", "")  
  
  lyrics <- str_replace_all(lyrics, "\\{.*?\\}", "")  
  
  lyrics <- str_replace_all(lyrics, "(?<=[a-z0-9])(?=[A-Z])", "\n")
  
  lyrics <- str_replace_all(lyrics, "[\"'\\?\\\\(),]", "")
  
  lyrics <- str_replace_all(lyrics, "\\s+", " ")
  lyrics <- str_replace_all(lyrics, "(?<!\n)\\s*(?=\n)", "")
  
  lyrics <- str_replace_all(lyrics, "[^A-Za-z0-9ıöüçğşİÖÜÇĞŞ\\s\\n.,?!;:'\"-]", "")
  
  lyrics <- str_squish(lyrics)
  
  return(lyrics)
}

top_artists_tracks_tr_atomic <- top_artists_tracks_tr_atomic %>%
  mutate(lyrics = map_chr(lyrics, clean_lyrics_tr))

print(top_artists_tracks_tr_atomic %>% select(artist_name, track_name, lyrics))

```

```{r}
write.csv(top_artists_tracks_tr_atomic, file = "top_artists_tracks_with_TR.csv", row.names = FALSE)
```

Cleaning Spanish Lyrics

```{r}
cleaned_lyrics_es <- function(lyrics) {
  if (is.na(lyrics)) return(NA)
  
  lyrics <- str_replace_all(lyrics, "\\s*\\[.*?\\]\\s*", " ")
  lyrics <- str_replace_all(lyrics, "\\s*\\(.*?\\)\\s*", " ")
  
  lyrics <- str_replace_all(lyrics, "(?<=[a-z0-9])(?=[A-Z])", "\n")
  
  lyrics <- str_replace_all(lyrics, "\\s+", " ")
  lyrics <- str_replace_all(lyrics, "(?<!\n)\\s*(?=\n)", "")
  
  lyrics <- str_replace_all(lyrics, "[^A-Za-z0-9\\s\\n\\.,?!;:'\"-]", "")
  
  lyrics <- str_squish(lyrics)
  
  return(lyrics)
}

if (!"lyrics_es" %in% colnames(top_artists_tracks_es)) {
  message("Warning: `lyrics_es` column is missing! Initializing as NA.")
  top_artists_tracks_es <- top_artists_tracks_es %>%
    mutate(lyrics_es = NA_character_)
}

top_artists_tracks_es <- top_artists_tracks_es %>%
  mutate(lyrics_es = map_chr(lyrics_es, ~ ifelse(is.na(.x), NA_character_, cleaned_lyrics_es(.x))))

print(top_artists_tracks_es %>% select(artist_name, track_name_es, lyrics_es))

write.csv(top_artists_tracks_es %>% select(artist_name, track_name_es, genius_url_es, genius_id_es, lyrics_es),
          "cleaned_spanish_lyrics.csv", row.names = FALSE)

```

```{r}
spanish_lyrics <- read.csv("cleaned_spanish_lyrics.csv", stringsAsFactors = FALSE)

```

## Text Mining

### Tokenizing the Lyrics & Adding Stopwords

#### German

```{r}
german_lyrics_cleaned <- german_lyrics %>%
  unnest_tokens(word, cleaned_lyrics)

```

```{r}
german_stopwords <- stopwords("de", source = "stopwords-iso")

german_lyrics_cleaned <- german_lyrics_cleaned %>%
  filter(!word %in% german_stopwords)



```

#### Turkish

```{r}

turkish_stops <- stopwords("turkish", source = "stopwords-iso")

```

```{r}
tokens_lyrics_tr <- tokens(top_artists_tracks_tr_atomic$lyrics)
dfm_text <- dfm(tokens_lyrics_tr)

```

#### Spanish

```{r}
spanish_stops <- stopwords("es")  

custom_stopwords <- c("si", "ah", "oh", "ala", "eh", "verso", "estribillo", "pa", 
                      "quiere", "quiero", "woh", "morad", "sé", "uh", "pone", "ser",
                      "doy", "t'u", "s'e", "vo'a", "jc", "to", "ere", "ahah", "voa", "beny", "yan")  


all_stopwords <- unique(c(spanish_stops, custom_stopwords))

word_freq_es <- top_artists_tracks_es_atomic %>%
  filter(!is.na(lyrics_es) & lyrics_es != "") %>%  
  unnest_tokens(word, lyrics_es) %>%  
  filter(!word %in% all_stopwords & word != "") %>%  
  count(word, sort = TRUE)  


print(word_freq_es)

```

### German Word Frequencies & Sentiment Analysis

#### Frequencies

```{r}
#| include: false
word_freq <- german_lyrics_cleaned %>%
  count(word, sort = TRUE)

word_freq
```

#### Bing-Sentiment (Positive/ Negative)

```{r}
sentiments_bing <- get_sentiments("bing")

sentiment_analysis_bing <- german_lyrics_cleaned %>%
  inner_join(sentiments_bing, by = "word") %>%
  count(sentiment, sort = TRUE)

sentiment_analysis_bing

ggplot(sentiment_analysis_bing, aes(x = sentiment, y = n, fill = sentiment)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Positive & Negative Sentiments in Song Lyrics", x = "Sentiment", y = "Count")

```

The sentiment analysis of the song lyrics shows that negative words occur significantly more frequently than positive ones. This could indicate that the song lyrics tend to deal with melancholic, critical or gloomy topics.

#### NRC Sentiment Anaylysis

```{r}
sentiments_nrc <- get_sentiments("nrc")

sentiment_analysis_nrc <- german_lyrics_cleaned %>%
  inner_join(sentiments_nrc, by = "word") %>%
  count(sentiment, sort = TRUE)


ggplot(sentiment_analysis_nrc, aes(x = reorder(sentiment, -n), y = n, fill = sentiment)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Emotional Analysis of songs", x = "Emotions", y = "Frequencies")


```

The emotional analysis of the lyrics shows that negative emotions occur most frequently, followed by fear and a moderate number of positive terms. This indicates that the lyrics often have a gloomy or serious atmosphere, but still contain elements of trust and positive emotions.

#### Word Correlations: Male & Female

```{r}
word_correlation <- german_lyrics_cleaned %>%
  unnest_tokens(word, lyrics) %>%
  pairwise_cor(word, track_name, sort = TRUE)

male_terms <- c("digga")
female_terms <- c("frau", "frauen", "frau'n")

male_related_words <- word_correlation %>%
  filter(item1 %in% male_terms | item2 %in% male_terms) %>%
  mutate(
    male_term = ifelse(item1 %in% male_terms, item1, item2),
    other_term = ifelse(item1 %in% male_terms, item2, item1)
  ) %>%
  filter(!(other_term %in% male_terms)) %>%
  filter(correlation > 0.1) %>%
  arrange(desc(correlation)) %>%
  head(20)

female_related_words <- word_correlation %>%
  filter(item1 %in% female_terms) %>%
  mutate(
    female_term = ifelse(item1 %in% female_terms, item1, item2),
    other_term = ifelse(item1 %in% female_terms, item2, item1)
  ) %>%
  filter(!(other_term %in% female_terms)) %>%
  filter(correlation > 0.1) %>%
  arrange(desc(correlation)) %>%
  head(20)

ggplot(male_related_words, 
       aes(x = reorder(other_term, correlation), y = correlation)) +
  geom_col(fill = "#6699FF") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Words Associated with Male Terms in German Lyrics",
    x = "Associated Words", 
    y = "Correlation Strength"
  )

ggplot(female_related_words, 
       aes(x = reorder(other_term, correlation), y = correlation)) +
  geom_col(fill = "#FF6699") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Words Associated with Female Terms in German Lyrics",
    x = "Associated Words", 
    y = "Correlation Strength"
  )


```

Male-Associated Words: The words most correlated with male-related terms in German lyrics include "Wien" (Vienna), "ruf" (call), "krieg" (war), "anzug" (suit), and "Mercedes." These words suggest themes related to power, status, and action, which are often associated with masculinity in lyrical contexts.

Female-Associated Words: The words most correlated with female-related terms include "vorbild" (role model), "schlechtes" (bad), "richtig" (right), and "freund" (friend). These associations indicate a mix of both positive and negative connotations, reflecting diverse representations of women in lyrics.

The words associated with male terms in German lyrics change each time we run our code, so our analysis may vary.

#### Word Correlations

```{r}

word_correlation <- german_lyrics_cleaned %>%
  unnest_tokens(word, lyrics) %>%
  pairwise_cor(word, track_name, sort = TRUE)


print(head(word_correlation, 20))

word_correlation

mann_correlation <- word_correlation %>%
  filter(item1 == "männer" | item2 == "mann")

print(mann_correlation)

frau_correlation <- word_correlation %>%
  filter(item1 == "frauen"| item2 == "frauen")

print(frau_correlation)

```

### Turkish Word Frequencies & Sentiment Analysis

```{r}
#| warning: false
#| include: false
word_freq <- dfm_text |> 
  convert(to = "data.frame") |> 
  gather(key = "word", value = "frequency") |> 
  filter(frequency > 0) |> 
  arrange(desc(frequency)) |> 
  mutate(frequency = as.numeric(frequency)) |>
  filter(!is.na(frequency)) 
  


word_freq <- word_freq |> 
  slice(-1:-15) |> 
  filter(!word %in% turkish_stops) |> 
  filter(!word %in% c("bi", "mi", "he", "senle", "benle", "şeyini", "neydi", "çoksöyle"))

  print(word_freq)
```

#### Bing Sentiment Analysis (Positive/ Negative)

```{r}
sentiments_bing_tr <- get_sentiments("bing")

sentiment_analysis_bing_tr <- top_artists_tracks_tr_atomic %>%
  unnest_tokens(word, lyrics) %>%  
  filter(!word %in% turkish_stops) %>%  
  inner_join(sentiments_bing_tr, by = "word") %>%  
  count(sentiment, sort = TRUE)  

print(sentiment_analysis_bing_tr)

ggplot(sentiment_analysis_bing_tr, aes(x = sentiment, y = n, fill = sentiment)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Positive & Negative Sentiments in Turkish Lyrics", x = "Sentiment", y = "Count")

```

#### NRC Sentiment Analysis

```{r}
sentiments_nrc <- get_sentiments("nrc")

sentiment_analysis_nrc <- top_artists_tracks_tr_atomic %>%
  unnest_tokens(word, lyrics) %>%  
  filter(!word %in% turkish_stops) %>%  
  inner_join(sentiments_nrc, by = "word") %>%
  count(sentiment, sort = TRUE)  

print(sentiment_analysis_nrc)

```

```{r}

ggplot(sentiment_analysis_nrc, aes(x = reorder(sentiment, n), y = n, fill = sentiment)) +
  geom_bar(stat = "identity") +
  theme_minimal() +  
  labs(title = "Emotion Analysis of Turkish Lyrics", x = "Emotion", y = "Frequency") +
  coord_flip()
```

#### Word Correlation Analysis: Male & Female

Turkish rap-hiphop songs like to refer to men in the context of love and material concepts such as money and cars ('para' = money, 'vito' = famous car model vito). It also stresses the word 'corleone' - which is a known name for many of us - that requires no explanation.

It mostly talks about men who like to have fun in parties (see 'partilerde' = 'at parties', 'oynuyom' = 'I dance' or 'I play', 'ışklar' = 'lights', and 'tavlıyon' = 'you pull girls'). Funny, right!!

As all the artists from our Turkish playlist are men, it is appropriote to say that male rappers refer to women in melancholic contexts, highlighted by words such as 'uyuyamamak' (to not be able to sleep), 'karmakarışık' (very complicated), 'geceler, geceleri, geceleyin' (at night), 'fıttırırken' (as I go crazy), 'duygularım' (my emotions), 'acımasız' (cruel), 'bira' (beer). They also referred to women in the context of fun, although not quite prominently, stressed by 'eğlence' (fun).

```{r}
word_correlation_tr <- top_artists_tracks_tr_atomic %>%
  filter(!is.na(track_name)) %>%
  unnest_tokens(word, lyrics) %>%
  filter(!word %in% turkish_stops, nchar(word) > 2) %>%
  pairwise_cor(word, track_name, sort = TRUE)

male_terms_tr <- c("adam", "lavuk", "eleman", "piç", "çocuk", "herif", "dallama")

male_related_words_tr <- word_correlation_tr %>%
  filter(item1 %in% male_terms_tr | item2 %in% male_terms_tr) %>%
  mutate(
    male_term = ifelse(item1 %in% male_terms_tr, item1, item2),
    other_term = ifelse(item1 %in% male_terms_tr, item2, item1)
  ) %>%
  filter(!(other_term %in% male_terms_tr)) %>%
  filter(correlation > 0.1) %>%
  arrange(desc(correlation)) %>%
  head(20)


ggplot(male_related_words_tr, 
       aes(x = reorder(other_term, correlation), y = correlation)) +
  geom_col(fill = "#6699FF") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Words Associated with Male Terms in Turkish Lyrics",
    x = "Associated Words", 
    y = "Correlation Strength"
  )


female_terms_tr <- c("kadın", "kadınlar", "o", "kız", "anne", "kızım", 
                     "eş", "kız kardeş", "abla", "gelin", "aşk")

female_related_words_tr <- word_correlation_tr %>%
  filter(item1 %in% female_terms_tr | item2 %in% female_terms_tr) %>%
  mutate(
    female_term = ifelse(item1 %in% female_terms_tr, item1, item2),
    other_term = ifelse(item1 %in% female_terms_tr, item2, item1)
  ) %>%
  filter(!(other_term %in% female_terms_tr)) %>%
  filter(correlation > 0.1) %>%
  arrange(desc(correlation)) %>%
  head(20)  

ggplot(female_related_words_tr, 
       aes(x = reorder(other_term, correlation), y = correlation)) +
  geom_col(fill = "#FF9999") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Words Associated with Female Terms in Turkish Lyrics",
    x = "Associated Words", 
    y = "Correlation Strength"
  )

```

#### AFINN Sentiment Analysis

```{r}
sentiments_afinn_tr <- get_sentiments("afinn")

sentiment_analysis_afinn_tr <- top_artists_tracks_tr_atomic %>%
  unnest_tokens(word, lyrics) %>%
  filter(!word %in% turkish_stops) %>%
  inner_join(sentiments_afinn_tr, by = "word") %>%
  summarise(sentiment_score = sum(value, na.rm = TRUE))  

print(sentiment_analysis_afinn_tr)
```

### Spanish Word Frequencies & Sentiment Analysis

#### Bing Sentiment Analysis (Positive/ Negative)

```{r}
sentiments_bing_es <- get_sentiments("bing")

sentiment_analysis_bing_es <- top_artists_tracks_es_atomic %>%
  unnest_tokens(word, lyrics_es) %>%
  filter(!word %in% all_stopwords) %>%
  inner_join(sentiments_bing_es, by = "word") %>%
  count(sentiment, sort = TRUE)  

print(sentiment_analysis_bing_es)

ggplot(sentiment_analysis_bing_es, aes(x = sentiment, y = n, fill = sentiment)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Positive & Negative Sentiments in Spanish Lyrics", x = "Sentiment", y = "Count")

```

The sentiment analysis of the song lyrics shows that positive words are more frequently found in the Spanish lyrics than negative words. This could show us that the songs are more about potential love interests.

#### NRC Sentiment Anaylysis

```{r}
sentiments_nrc_es <- get_sentiments("nrc")

sentiment_analysis_nrc_es <- top_artists_tracks_es_atomic %>%
  unnest_tokens(word, lyrics_es) %>%
  filter(!word %in% all_stopwords) %>%
  inner_join(sentiments_nrc_es, by = "word") %>%
  count(sentiment, sort = TRUE)  

print(sentiment_analysis_nrc_es)

ggplot(sentiment_analysis_nrc_es, aes(x = reorder(sentiment, -n), y = n, fill = sentiment)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Emotional Analysis of Spanish Lyrics", x = "Emotion", y = "Frequencies")

```
The emotional analysis of the lyrics reveals that positivity is the most expressed emotion, closely followed by negativity, with fear and joy appearing to a lesser extent. This suggests that the lyrics convey a sense of hopefulness, albeit with a touch of restraint.

#### Word Correlation Analysis: Male & Female

```{r}
spanish_stopwords <- stopwords::stopwords("es")

word_correlation_es <- top_artists_tracks_es_atomic %>%
  filter(!is.na(track_name_es)) %>%
  unnest_tokens(word, lyrics_es) %>%
  filter(!word %in% spanish_stopwords, nchar(word) > 2) %>%
  pairwise_cor(word, track_name_es, sort = TRUE)


male_terms_es <- c("hombre", "hombres", "tipo", "jefe", "rey", "bro", "pana", 
                   "gánster", "calle", "mafioso", "boss",  
                   "bandolero", "real g", "maleante", "hermano", "primo", "papi", "compa", "negocio", "lealtad", "respeto")

male_related_words_es <- word_correlation_es %>%
  filter(item1 %in% male_terms_es | item2 %in% male_terms_es) %>%
  mutate(
    male_term = ifelse(item1 %in% male_terms_es, item1, item2),
    other_term = ifelse(item1 %in% male_terms_es, item2, item1)
  ) %>%
  filter(!(other_term %in% male_terms_es)) %>%
  filter(correlation > 0.1) %>%
  arrange(desc(correlation)) %>%
  head(20)


ggplot(male_related_words_es, 
       aes(x = reorder(other_term, correlation), y = correlation)) +
  geom_col(fill = "#6699FF") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Words Associated with Male Terms in Spanish Lyrics",
    x = "Associated Words", 
    y = "Correlation Strength"
  )

female_terms <- c("mujer", "mujeres", "ella", "chica", "madre", "niña", 
                  "señora", "esposa", "novia", "hermana", "hija")

female_related_words_es <- word_correlation_es %>%
  filter(item1 %in% female_terms | item2 %in% female_terms) %>%
 mutate(
    female_term = ifelse(item1 %in% female_terms, item1, item2),
    other_term = ifelse(item1 %in% female_terms, item2, item1)
  ) %>%
  filter(!(other_term %in% female_terms)) %>%
  filter(correlation > 0.1) %>%
  arrange(desc(correlation)) %>%
  head(20)  # 

ggplot(female_related_words_es, 
       aes(x = reorder(other_term, correlation), y = correlation)) +
  geom_col(fill = "#FF9999") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Words Associated with Female Terms in Spanish Lyrics",
    x = "Associated Words", 
    y = "Correlation Strength"
  )
```

When analyzing male-associated words, we find terms like *"pacto"* (pact), *"quemamo"* (burning), likely symbolizing success, and *"fuego"* (fire), which conveys greatness. The word *"impacto"* (impact) also appears, suggesting their influence on the genre. Overall, male-associated words are closely tied to themes of success and self-importance.

When analyzing female-associated words, we find terms like *"supiera"* (if you knew), *"queda"* (stay), *"enamora"* (fall in love), and *"locura"* (madness/crazy). These words suggest that female-associated language is more centered around love, emotions, and relationships.

#### AFINN Sentiment Analysis (Numerical Scores)

```{r}
sentiments_afinn_es <- get_sentiments("afinn")

sentiment_analysis_afinn_es <- top_artists_tracks_es_atomic %>%
  unnest_tokens(word, lyrics_es) %>%
  filter(!word %in% all_stopwords) %>%
  inner_join(sentiments_afinn_es, by = "word") %>%
  summarise(sentiment_score = sum(value, na.rm = TRUE))  

print(sentiment_analysis_afinn_es)

```

## DE- TR- ES Sentiment Comparison

```{r}
sentiment_analysis_bing_es <- sentiment_analysis_bing_es %>% mutate(language = "Spanish")
sentiment_analysis_bing_tr <- sentiment_analysis_bing_tr %>% mutate(language = "Turkish")
sentiment_analysis_bing_de <- sentiment_analysis_bing %>% mutate(language = "German")

sentiment_comparison <- bind_rows(sentiment_analysis_bing_es, 
                                  sentiment_analysis_bing_tr, 
                                  sentiment_analysis_bing_de)

sentiment_analysis_nrc_es <- sentiment_analysis_nrc_es %>% mutate(language = "Spanish")
sentiment_analysis_nrc_tr <- sentiment_analysis_nrc %>% mutate(language = "Turkish")
sentiment_analysis_nrc_de <- sentiment_analysis_nrc %>% mutate(language = "German")

emotion_comparison <- bind_rows(sentiment_analysis_nrc_es, 
                                sentiment_analysis_nrc_tr, 
                                sentiment_analysis_nrc_de)
```

The below bar plot provides a quick comparison for all three languages on the basis of positive and negative sentiments. Due to considerably greater volume of words in the songs that are present in our list, German tops both sentiments in the count of words that represent each sentiment.

Spanish is second to German in terms of the count of words reflecting both positivity and negativity, however, both sentiments post highly close numbers, offering a balance as explained in the previous sections.

Turkish has the lowest number of words in both sentiments, however, this is due to the relatively lower volume of words across all songs. This also has implications that Turkish rap-hiphop songs are not constructed in sentences with a high number of words, instead, they form shorter sentences and let the vibes do the rest!

It is also possible to say that German rap/hiphop is arguably based on long sentences and maybe even story telling, just like old school versions of the genre. Gür likes this a lot!

Spanish songs, on the other hand, demonstrate an in-between performance regarding the number of words, proposing a modest way.

```{r}
ggplot(sentiment_comparison, aes(x = sentiment, y = n, fill = language)) +
  geom_bar(stat = "identity", position = "dodge") +  
  theme_minimal() +
  labs(title = "Comparison of Positive & Negative Sentiments Across Languages",
       x = "Sentiment Type", y = "Count") +
  scale_fill_manual(values = c("Spanish" = "#F1BF00", "Turkish" = "#C8102E", "German" = "black")) +
  theme(legend.title = element_blank())  
```

To further illustrate the variation in emotional expression across song lyrics, we created this graph to highlight lyrical differences by country. Given the strong cultural and musical exchange between German and Turkish hip-hop/rap, their lyrical sentiment exhibits a similar emotional range. In contrast, Spanish lyrics show less expressiveness in these particular areas.

```{r}
ggplot(emotion_comparison, aes(x = reorder(sentiment, -n), y = n, fill = language)) +
  geom_bar(stat = "identity", position = "dodge") +  
  theme_minimal() +
  labs(title = "Comparison of Emotional Sentiments Across Languages",
       x = "Emotion", y = "Frequency") +
  scale_fill_manual(values = c("Spanish" = "#F1BF00", "Turkish" = "#C8102E", "German" = "black")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), 
        legend.title = element_blank()) 
```
# Concluson

What started as a quest to uncover gender-related violent language in hip-hop and rap lyrics across German, Turkish, and Spanish music quickly turned into something bigger: an exploration of lyrical emotions, gendered language, and the unique vibes of each culture’s rap scene. Turns out, rappers across these languages aren’t dropping violent bars about gender all that much—but they do have a lot to say about success, struggle, and emotions. 

What We Found:

Sentiment Showdown:
German rap goes all-in, packing both the most positive and negative words— think dramatic storytelling with serious emotional weight.
Spanish lyrics keep things balanced, serving a mix of love, heartbreak, and confidence.
Turkish rap keeps it short but powerful, leaning into melancholic vibes, nightlife, and raw emotion.

Emotional Rollercoaster:
Negativity reigns supreme across all three languages, with fear creeping in, especially in German and Turkish lyrics.
Spanish rap? More hopeful, but still not afraid to mix in some bittersweet themes.
Turkish artists don’t hold back on expressing deep emotions—whether it’s partying hard or feeling heartbreak.

Gendered Bars:
Male-associated words? It’s all about dominance, success, and the flex. German rap throws in "krieg" (war) and "Mercedes" for power and luxury, Turkish rap mixes "para" (money) with "partilerde" (at parties) for a mix of wealth and nightlife, while Spanish rap hypes "pacto" (pact) and "fuego" (fire) to emphasize greatness.

Female-associated words? More about emotions, relationships, and complexity. German lyrics balance between "vorbild" (role model) and "schlechtes" (bad), Turkish rap leans into heartache with "uyuyamamak" (can’t sleep) and "fıttırırken" (going crazy), while Spanish lyrics stay romantic with "enamora" (fall in love) and "locura" (madness).

Bottom line? Across the board, men are rapping about status, power, and nightlife, while women in lyrics are more tied to love, emotions, and personal struggles.

The Big Picture:
Across the board, men rap about status, power, and nightlife, while women in lyrics are more connected to love, emotions, and personal struggles. German rap brings the lyrical fire with intense storytelling, Turkish rap packs an emotional punch, balancing party life with deep personal struggles, and Spanish rap smooths it all out with love and self-reflection. While cultural differences shape the way emotions and success are expressed, hip-hop in every language remains a universal mix of ambition, struggle, and storytelling.
